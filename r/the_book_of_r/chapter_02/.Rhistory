library(dplyr)
library(dslabs)
data("murders")
murders <- mutate(murders, population_in_millions = population / 10^6)
head(murders)
data("murders")
head(murders)
murders <- mutate(murders, rate = 10^6 * total/population)
head(murders)
data("murders")
murders <- mutate(murders, rate = 10^5 * total/population)
head(murders)
x <- c(3, 4, 0, 1, -1, 2, 7, 3)
rank(x)
x <- c(3, 4, 0, 1, -1, 2, 7, 6)
rank(x)
x[rank(x)]
murders <- mutate(murders, rank = rank(rate))
head(murders)
select(murders, state, population) %>% head()
select(murders, state, abb) %>% head()
filter(murders, rank<=5)
no_south <- filter(murders, region != 'South')
str(no_south)
head(no_south)
View(no_south)
murders_nw <- filter(murders, region %in% c('Northeast', 'West'))
murders_nw
my_states <- filter(murders, region %in% c('Northeast', 'West') & rate < 1)
select(my_states, state, rate, rank)
murders %>% select(state, region, rate) %>% filter(rate <= 0.71)
data("murders")
head(murders)
murders <- murders %>% mutate(rate = 10^5 * total/population, rank = rank(-rate))
head(murders)
data(murders)
my_states <-murders %>% mutate(rate = 10^5*total/population, rank=rank(-rate)) %>%
filter(region %in% c('Northeast', 'West') & rate < 1) %>% select(state, rate, rank)
my_states
data("heights")
head(heights)
str(heights)
s <- heights %>% filter(sex=='Female') %>% summarise(average=mean(height), standard_deviation=sd(height))
s
s2 <- heights %>% group_by(sex) %>% summarise(average=mean(height), standard_deviation=sd(height))
s2
heights %>% filter(sex=='Female') %>% summarise(median_min_max = quantile(height, c(0.5, 0, 1)))
heights %>% group_by(sex)
murders %>% arrange(population) %>% head()
murders <- murders %>% mutate(rate = 10^5*total/population, rank=rank(-rate))
head(murders)
murders %>% arrange(region, rate) %>% head()
library(NHANES)
install.packages('NHANES')
library(NHANES)
data("NHANES")
library(dslabs)
data("na_example")
mean(na_example)
mean(na_example, na.rm = TRUE)
View(NHANES)
str(NHANES)
NHANES %>% filter(AgeDecade=='20-29' & Gender=='female')
NHANES %>% filter(AgeDecade=='20-29' & Gender=='female') %>% head()
NHANES %>% filter(AgeDecade=='20-29' & Gender=='female') %>% View()
NHANES %>% filter(Gender=='female') %>% View()
NHANES %>% filter(AgeDecade=='20-29') %>% head()
NHANES %>% filter(AgeDecade=='20-29') %>% View()
NHANES$AgeDecade
NHANES %>% filter(AgeDecade=="20-29") %>% View()
NHANES %>% filter(AgeDecade=="20-29")
murders %>% group_by(region)
#> # A tibble: 51 x 6
#> # Groups:   region [4]
#>   state      abb   region population total  rate
#>   <chr>      <chr> <fct>       <dbl> <dbl> <dbl>
#> 1 Alabama    AL    South     4779736   135  2.82
#> 2 Alaska     AK    West       710231    19  2.68
#> 3 Arizona    AZ    West      6392017   232  3.63
#> 4 Arkansas   AR    South     2915918    93  3.19
#> 5 California CA    West     37253956  1257  3.37
#> # … with 46 more rows
install.packages(c("hms", "Matrix", "stringi", "tibble", "xfun"))
install.packages(c("stringi", "tibble"))
install.packages(c("stringi", "tibble"))
filename <- "murders.csv"
dir <- system.file("extradata", package = "dslabs")
fullpath <- file.path(dir,filename)
file.copy(fullpath, 'murders.csv')
dir <- system.file("extdata", package = "dslabs")
fullpath <- file.path(dir,filename)
file.copy(fullpath, 'murders.csv')
library(tidyverse)
dat <- read_csv(filename)
head(dat)
system.file(package = "dslabs")
dir <- system.file(package = "dslabs")
list.files(path = dir)
getwd()
library(readr)
read_lines("murders.csv", n_max = 3)
url <- "https://raw.githubusercontent.com/rafalab/dslabs/master/inst/
extdata/murders.csv"
seq(1.1,9.9, by=1.1)
c(seq(0,10, by=1.1),11)
c(seq(0,9.9, by=1.1),10)
cidades <- c("Florianópolis", "Blumenau", "Piracicaba",
"Sorocaba", "Palmas", "Goianésia", "Ilhéus",
"Porto Seguro", "Belém", "Boa Vista")
cidades
região <- c ("Sul", "Sul", "Sudeste", "Sudeste", "Centro-Oeste",
"Centro-Oeste", "Nordeste", "Nordeste", "Norte",
"Norte")
região
habitantes <- c(477798, 352460, 297767, 644919, 217056, 69062, 148437, 80240, 143474, 277799)
df <- data.frame(cidades,região,habitantes)
tapply(habitantes, região, mean)
funcao=function(a,b){
if(a!=b)
print(a+b)
else
print(a*b)
}
funcao(6,2)
alturas <- c(180, 165, 160, 193, 172, 158)
pesos  <- c(87, 58, 65, 100, 68, 43)
alturas.m  <- alturas/100
IMC <- pesos/alturas.m^2
log.IMC <- log(IMC)
par(mfrow = c(1,2))
plot(alturas.m, log.IMC,   cex = 0.75, pch = 20,
xlim = c(1.5, 2), ylim = c(log(15),log(30)),
xlab = 'Alturas (em m)',  ylab = 'Log(IMC)')
plot(alturas.m, IMC,  cex = 0.75, pch = 20,
xlim = c(1.5, 2), ylim = c(15,30),
xlab = 'Alturas (em m)', ylab = 'IMC')
alturas <- c(180, 165, 160, 193, 172, 158)
pesos  <- c(87, 58, 65, 100, 68, 43)
alturas.m  <- alturas/100
IMC <- pesos/alturas.m^2
log.IMC <- log(IMC)
par(mfrow = c(2,1))
plot(alturas.m, IMC,  cex = 0.75, pch = 20,
xlim = c(1.5, 2), ylim = c(15,30),
xlab = 'Alturas (em m)', ylab = 'IMC')
plot(alturas.m, log.IMC,  cex = 0.75, pch = 20,
xlim = c(1.5, 2), ylim = c(log(15),log(30)),
xlab = 'Alturas (em m)',  ylab = 'Log(IMC)')
alturas <- c(180, 165, 160, 193, 172, 158)
pesos  <- c(87, 58, 65, 100, 68, 43)
alturas.m  <- alturas/100
IMC <- pesos/alturas.m^2
log.IMC <- log(IMC)
plot(alturas.m, IMC,   cex = 1.2, pch = 19,
xlim = c(1.5, 2), ylim = c(15,30))
plot(alturas.m, log.IMC,  cex = 1.2, pch = 19,
xlim = c(1.5, 2), ylim = c(log(15),log(30)))
alturas <- c(180, 165, 160, 193, 172, 158)
pesos  <- c(87, 58, 65, 100, 68, 43)
alturas.m  <- alturas/100
IMC <- pesos/alturas.m^2
log.IMC <- log(IMC)
plot(alturas.m, IMC,   cex = 1.2, pch = 19,
xlim = c(1.5, 2), ylim = c(15,30))
plot(alturas.m, log.IMC,  cex = 1.2, pch = 19,
xlim = c(1.5, 2), ylim = c(log(15),log(30)))
alturas <- c(180, 165, 160, 193, 172, 158)
pesos  <- c(87, 58, 65, 100, 68, 43)
IMC <- pesos/alturas^2
log.IMC <- log(IMC)
par(mfrow = c(1,2))
plot(alturas, IMC,   cex = 1.2, pch = 19,
xlim = c(1.5, 2), ylim = c(15,30),
xlab = 'Alturas (em m)',  ylab = 'IMC')
plot(alturas, log.IMC,  cex = 1.2, pch = 19,
xlim = c(1.5, 2), ylim = c(log(15),log(30)),
xlab = 'Alturas (em m)', ylab = 'Log(IMC)')
alturas <- c(180, 165, 160, 193, 172, 158)
pesos  <- c(87, 58, 65, 100, 68, 43)
alturas.m  <- alturas/100
IMC <- pesos/alturas.m^2
log.IMC <- log(IMC)
par(mfrow = c(1,2))
plot(alturas.m, IMC,  cex = 1, pch = 19,
xlim = c(1.5, 2), ylim = c(15,30),
xlab = 'Alturas (em m)',  ylab = 'IMC')
plot(alturas.m, log.IMC,   cex = 1, pch = 19,
xlim = c(1.5, 2), ylim = c(log(15),log(30)),
xlab = 'Alturas (em m)', ylab = 'Log(IMC)')
var=c(rep(1,14),rep(2,12),rep(3,4)); var
n=length(var); n
tvar=table(var); tvar
fr=tvar/n; fr
fp=fr*100; fp
varv <- paste(c("1", "2", "3"), "\n", round((var/n)*100,2),"%", sep=" ")
pie(var, col=c(2,3,4), labels=varv, main=" Meios de transporte")
install.packages(c("broom", "fansi", "ggplot2", "Matrix", "mgcv", "rmarkdown", "stringi", "tibble", "tinytex", "xfun"))
install.packages(c("curl", "dplyr", "mime", "stringi"))
install.packages(c("curl", "dplyr", "mime", "stringi"))
install.packages(c("curl", "dplyr", "mime", "stringi"))
install.packages(c("broom", "cli", "colorspace", "cpp11", "curl", "dplyr", "gargle", "ggplot2", "mime", "stringi"))
install.packages("cli")
employee_df <- data.frame(name=c("A", "B", "C"), department=c("Engineering", "Operations", "Sales"))
employee_df
x <- array(rnorm(12), c(3,4))
x
random_df <- as.data.frame(x)
random_df
install.packages("R6")
library(R6)
Complex <- R6Class("Complex",
public=list(
real=NULL,
img=NULL,
inicialize=function(real, imag){
self$set_real(real)
self_set_imag(imag)
},
set_real=function(real){
self$real=real
},
set_imag=function(imag){
self$imag=imag
},
print = function(){
cat(past0(as.character(self$real), '+', as.character(self$imag), 'j'), '\n')
}
)
)
x = Complex$new(1,2)
x = Complex(1,2)
x
x <- Complex$new(1,2)
install.packages(c("blob", "cli", "googledrive", "googlesheets4", "isoband", "Rcpp", "readr", "rvest", "stringi", "tibble", "utf8"))
install.packages(c("stringi", "tibble", "utf8"))
install.packages(c("broom", "pillar", "stringi", "tibble", "utf8"))
setwd("~/")
setwd("D:/Projetos/learn_to_code/r/the_book_of_r/chapter_02")
git status
<ol type="a">
<li>Create and store a vector that contains the following, in this order:</li>
<ul>
<li>A sequence of length 5 from 3 to 6 (inclusive)</li>
```{r}
vec.a <- seq(from=3, to=6, length.out=5)
vec.a
```
<li>A twofold repetition of the vector $c(2, -5.1, -33)$</li>
<li>The value $\dfrac{7}{42} + 2$</li>
</ul>
<li>Extract the first and the last elements of your vector from (a), storing then as a new object.</li>
<li>Store as a third object the values returned by omitting the first and the ast of your vector from (a).</li>
<li>Use only (b) and (c) to reconstruct (a).</li>
<li>Overwrite (a) with the same values sorted from smallest to largest.</li>
<li>Use the colon operator as an index vector to reverse the order of (e), and confirm this is identical to using sort on (e) with decreasing=TRUE</li>
<li>Create a vector from (c) that repeats the third element of (c) thee times, the six element four times and the last element once.</li>
</ol>
vec.a <- seq(from=3, to=6, length.out=5)
vec.a
vec.a <- seq(from=3, to=6, length.out=5)
vec.a
vec.b <- rep(c(2, -5.1, -33), each=2)
vec.b
vec.a <- seq(from=3, to=6, length.out=5)
vec.a
vec.b <- rep(c(2, -5.1, -33), each=2)
vec.b
c <- 7/42 + 3
c
vec.1 <- seq(from=3, to=6, length.out=5)
vec.1
vec.2 <- rep(c(2, -5.1, -33), each=2)
vec.2
element.3 <- 7/42 + 3
element.3
vec.1 <- seq(from=3, to=6, length.out=5)
vec.1
vec.2 <- rep(c(2, -5.1, -33), each=2)
vec.2
vec.3 <- c(7/42 + 3)
vec.3
vec.a <- c(vec.1, vec.2, vec.3)
vec.a
vec.b <- vec.a[c(1,length(vec.a))]
vec.b
vec.1 <- seq(from=3, to=6, length.out=5)
vec.1
vec.2 <- rep(c(2, -5.1, -33), each=2)
vec.2
vec.3 <- c(7/42 + 3)
vec.3
vec.a <- c(vec.1, vec.2, vec.3)
vec.a
vec.b <- vec.a[c(1,length(vec.a))]
vec.b
vec.c <- vec.a[-c(1,length(vec.a))]
vec.c
vec.d <- c(vec.b[1], vec.c, vec.b[2])
vec.d
sort(vec.a, decreasing = FALSE)
vec.a[length(vec.a):1]
vec.a[c(length(vec.a):1)]
vec.a
vec.a <- sort(vec.a, decreasing = FALSE)
vec.a
vec.a
vec.a[c(length(vec.a):1)]
vec.f <- vec.a[c(length(vec.a):1)]
vec.f
vec.f <- vec.a[c(length(vec.a):1)]
vec.f == sort(vec.a, decreasing = TRUE)
vec.f <- vec.a[c(length(vec.a):1)]
all(vec.f == sort(vec.a, decreasing = TRUE))
vec.f <- vec.a[c(length(vec.a):1)]
vec.f
all(vec.f == sort(vec.a, decreasing = TRUE))
c(rep(vec.c[3], 3), rep(vec.c[6], 4), vec.c[length(vec.c)])
vec.e.copy <- vec.e
vec.e.copy <- vec.a
values_to_replace <-seq(from=99, to=95)
values_to_replace
vec.e.copy[1]
vec.e.copy <- vec.a
values_to_replace <-seq(from=99, to=95)
values_to_replace
vec.e.copy[1] <- values_to_replace[1]
vec.e.copy[5:7] <- values_to_replace[2:4]
vec.e.copy[length(vec.e.copy)] <- values_to_replace[length(values_to_replace)]
vec.e.copy
vec.e.copy <- vec.a
values_to_replace <-seq(from=99, to=95)
vec.e.copy[1] <- values_to_replace[1]
vec.e.copy[5:7] <- values_to_replace[2:4]
vec.e.copy[length(vec.e.copy)] <- values_to_replace[length(values_to_replace)]
vec.e.copy
